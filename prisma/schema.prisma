// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  password      String?
  emailVerified DateTime?

  suggestions ModSuggestion[]
  votes       Vote[]
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ModSuggestion {
  id          String @id @default(cuid())
  title       String
  description String
  modUrl      String?
  imageUrl    String?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  status    Status @default(PENDING)
  votes     Vote[]
  voteCount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mod_suggestions")
}

model Vote {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  suggestion   ModSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId String

  type VoteType

  createdAt DateTime @default(now())

  @@unique([userId, suggestionId])
  @@map("votes")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
